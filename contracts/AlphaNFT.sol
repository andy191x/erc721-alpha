// Contract based on https://docs.openzeppelin.com/contracts/3.x/erc721
// SPDX-License-Identifier: MIT

pragma solidity ^0.7.3;

import "hardhat/console.sol";

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/utils/Counters.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract AlphaNFT is ERC721, Ownable {

    uint256 private constant FIRST_ID = 1;
    uint256 private constant LAST_ID = 295; // 295 pieces in the alpha set

    // NOTE: This NFT is special and only has 295 items. We're able to compile them all into the contract via this string, then extract the IPFS CID necessary.
    string private constant defaultURIs = '';

    using Counters for Counters.Counter;

    //
    // Private data
    //

    Counters.Counter private _tokenIds;

    //
    // External methods
    //

    constructor() ERC721("AlphaNFT", "ALPHA")
    {
        // Start with Id #1.
        _tokenIds.increment();

        // Setup content
        _setBaseURI('ipfs://');
    }

    function mint(address recipient) external returns (uint256)
    {
        // Verify supply
        uint256 newItemId = _tokenIds.current();
        if (newItemId > LAST_ID) {
            revert("Sold out.");
        }
        _tokenIds.increment();

        // Mint
        _mint(recipient, newItemId);
        _setTokenURI(newItemId, getDefaultURI(newItemId));

        return newItemId;
    }

    //
    // Owner methods
    //

    function setBaseURI(string memory baseURI) external onlyOwner
    {
        _setBaseURI(baseURI);
    }

    function setTokenURI(uint256 tokenId, string memory tokenURI) external onlyOwner
    {
        if (!isTokenInRange(tokenId) || !isTokenMinted(tokenId)) {
            revert("Invalid token.");
        }
        _setTokenURI(tokenId, tokenURI);
    }

    //
    // Private methods
    //

    function isTokenInRange(uint256 tokenId) private pure returns (bool)
    {
        return (tokenId >= FIRST_ID && tokenId <= LAST_ID);
    }

    function isTokenMinted(uint256 tokenId) private view returns (bool)
    {
        return tokenId < _tokenIds.current();
    }

    function getDefaultURI(uint256 tokenId) private pure returns (string memory)
    {
        if (!isTokenInRange(tokenId)) {
            return '';
        }

        bytes memory defaultURIsBytes = bytes(defaultURIs);

        uint256 len = 46;
        uint256 start = (tokenId - 1) * len;

        bytes memory bstr = new bytes(len);
        for (uint256 i = 0; i < len; i++) {
            bstr[i] = defaultURIsBytes[start + i];
        }

        return string(bstr);
    }

    // ...
}
