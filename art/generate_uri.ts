#!/usr/bin/env ts-node

//
// Generates a URI array for AlphaNFT.sol from a pinned metadata blob, generated by pin_metadata.ts.
//

import * as path from 'path';
import fs from 'fs';

//
// Methods
//

const usage = () => {
    return path.basename(__filename) + ' <METADATA_DICTIONARY_JSON>';
}

const main = async () => {

    // Parse args
    let metadataDictionaryFile = '';

    if (process.argv.length >= 3) {
        metadataDictionaryFile = process.argv[2];
    }
    else {
        l('Usage: ' + usage());
        l_error('Not enough arguments.');
        return 1;
    }

    // Load metadata dictionary
    let metadataDictionary: any = {};

    l('Loading metadata dictionary...');
    try {
        if (fs.existsSync(metadataDictionaryFile)) {
            let json = fs.readFileSync(metadataDictionaryFile, {encoding: <BufferEncoding>'utf-8'});
            metadataDictionary = JSON.parse(json);
            if (metadataDictionary == null) {
                l_error('Invalid dictionary.');
                return 1;
            }
        }
    }
    catch (e) {
        l_error('Cannot load metadata dictionary.');
        return 1;
    }

    // Generate solidity URI array
    for (const [multiverseIdStr, ipfsUrl] of Object.entries(metadataDictionary)) {
        console.log('_defaultURI[' + multiverseIdStr + '] = \'' + ipfsUrl + '\';');
    }

    return 0;
}

const l = (text: string) => {
    console.log(text);
}

const l_error = (text: string) => {
    console.log('ERROR: ' + text);
}

//
// Script logic
//

main().then(exitCode => {
    process.exitCode = exitCode;
})
.catch((e) => {
    console.log('Caught exception from main():');
    throw e
});
